1)   ** Now we can create Pig and Dog objects and call the poly() method on both of them:**

ans)=> 
   class poly {
  public void main() {
    System.out.println("keep practicing poly");
  }
}

class Pig extends poly {
  public void main() {
    System.out.println("The pig says: wee wee");
  }
}

class Dog extends poly {
  public void main() {
    System.out.println("The dog says: bow wow");
  }
}

class Main {
  public static void main(String[] args) {
    poly mypoly = new poly();
    poly myPig = new Pig();
    poly myDog = new Dog();
        
    mypoly.main();
    myPig.main();
    myDog.main();
  }
}


2)   ** Method Overloading: changing no. of arguments **
ans) =>
       class main{  
static int add(int x,int y){return x+y;}  
static int add(int x,int y,int z){return x+y+z;}  
}  
class TestOverloading1{  
public static void main(String[] args){  
System.out.println(main.add(11,11));  
System.out.println(main.add(11,11,11));  
}}  

3) ** Example of Abstract Class that has Abstract method

ans) =>
       // Abstract class
abstract class main {
	abstract void printInfo();
}

// Abstraction performed using extends
class Employee extends main {
	void printInfo()
	{
		String name = "vikash";
		int age = 35;
		float salary = 335.2F;

		System.out.println(name);
		System.out.println(age);
		System.out.println(salary);
	}
}

// Base class
class Base {
	public static void main(String args[])
	{
		main s = new Employee();
		s.printInfo();
	}
}




