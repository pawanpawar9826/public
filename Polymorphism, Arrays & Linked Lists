1)   ** Now we can create Pig and Dog objects and call the poly() method on both of them:**

ans)=> 
   class poly {
  public void main() {
    System.out.println("keep practicing poly");
  }
}

class Pig extends poly {
  public void main() {
    System.out.println("The pig says: wee wee");
  }
}

class Dog extends poly {
  public void main() {
    System.out.println("The dog says: bow wow");
  }
}

class Main {
  public static void main(String[] args) {
    poly mypoly = new poly();
    poly myPig = new Pig();
    poly myDog = new Dog();
        
    mypoly.main();
    myPig.main();
    myDog.main();
  }
}


2)   ** Method Overloading: changing no. of arguments **
ans) =>
       class main{  
static int add(int x,int y){return x+y;}  
static int add(int x,int y,int z){return x+y+z;}  
}  
class TestOverloading1{  
public static void main(String[] args){  
System.out.println(main.add(11,11));  
System.out.println(main.add(11,11,11));  
}}  

3) ** Example of Abstract Class that has Abstract method

ans) =>
       // Abstract class
abstract class main {
	abstract void printInfo();
}

// Abstraction performed using extends
class Employee extends main {
	void printInfo()
	{
		String name = "vikash";
		int age = 35;
		float salary = 335.2F;

		System.out.println(name);
		System.out.println(age);
		System.out.println(salary);
	}
}

// Base class
class Base {
	public static void main(String args[])
	{
		main s = new Employee();
		s.printInfo();
	}
}

4)   **  Multidimensional Arrays in Java
ans) => import java.io.*;

class main {
	public static void main(String[] args)
	{
	
		int[][] arr = new int[6][6];

		System.out.println("Number of Rows:"+
						arr.length);
	
		System.out.println("Number of Columns:"+
						arr[0].length);
	}
}

5) pass multiple Type parameters in Generic
ans) => class Test<A, B>
{
	A obj1; // An object of type T
	B obj2; // An object of type U

	// constructor
	Test(A obj1, B obj2)
	{
		this.obj1 = obj1;
		this.obj2 = obj2;
	}

	// To print objects of T and U
	public void print()
	{
		System.out.println(obj1);
		System.out.println(obj2);
	}
}

// Driver class to test above
class Main
{
	public static void main (String[] args)
	{
		Test <String, Integer> obj =
			new Test<String, Integer>("KRISHNA",30);

		obj.print();
	}
}





